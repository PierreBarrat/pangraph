precompile(Tuple{Type{Base.Multimedia.TextDisplay}, Base.IOStream})
precompile(Tuple{typeof(Base.Filesystem.abspath), String})
precompile(Tuple{Base.Sort.var"##sortperm#12", Base.Sort.QuickSortAlg, Function, Function, Bool, Base.Order.ForwardOrdering, typeof(Base.sortperm), Array{Float64, 1}})
precompile(Tuple{Type{Base.Order.Perm{O, V} where V<:(AbstractArray{T, 1} where T) where O<:Base.Order.Ordering}, Base.Order.ReverseOrdering{Base.Order.ForwardOrdering}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Base.Sort.QuickSortAlg, Base.Order.Perm{Base.Order.ReverseOrdering{Base.Order.ForwardOrdering}, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, UInt16})
precompile(Tuple{typeof(MacroTools.__init__)})
precompile(Tuple{typeof(Random.shuffle!), Random.MersenneTwister, Array{Symbol, 1}})
precompile(Tuple{typeof(PanGraph.include), String})
precompile(Tuple{Base.var"#@label", LineNumberNode, Module, Symbol})
precompile(Tuple{Base.var"#@goto", LineNumberNode, Module, Symbol})
precompile(Tuple{typeof(Parsers.__init__)})
precompile(Tuple{typeof(Base.Threads.resize_nthreads!), Array{Base.MPFR.BigFloat, 1}, Base.MPFR.BigFloat})
precompile(Tuple{typeof(Base.Threads.resize_nthreads!), Array{Base.GMP.BigInt, 1}, Base.GMP.BigInt})
precompile(Tuple{typeof(PanGraph.Graphs.include), String})
precompile(Tuple{Base.var"#@show", LineNumberNode, Module, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.sprint), Function, Symbol})
precompile(Tuple{typeof(Base.show_unquoted), Base.GenericIOBuffer{Array{UInt8, 1}}, Symbol})
precompile(Tuple{Base.var"#@inline", LineNumberNode, Module, Any})
precompile(Tuple{Base.Multimedia.var"#@MIME_str", LineNumberNode, Module, Any})
precompile(Tuple{Rematch.var"#@match", LineNumberNode, Module, Any, Any})
precompile(Tuple{typeof(Rematch.handle_match_cases), Expr, Expr})
precompile(Tuple{typeof(MacroTools.match), Expr, Expr, Base.Dict{Any, Any}})
precompile(Tuple{typeof(MacroTools.normalise), Expr})
precompile(Tuple{typeof(MacroTools.unblock), Expr})
precompile(Tuple{typeof(MacroTools.rmlines), Expr})
precompile(Tuple{typeof(MacroTools.unblock), Symbol})
precompile(Tuple{typeof(MacroTools.isbinding), Symbol})
precompile(Tuple{MacroTools.var"#16#18", Expr})
precompile(Tuple{typeof(MacroTools.blockunify), Symbol, Expr})
precompile(Tuple{typeof(MacroTools.match_inner), Expr, Expr, Base.Dict{Any, Any}})
precompile(Tuple{typeof(MacroTools.match), Symbol, Symbol, Base.Dict{Any, Any}})
precompile(Tuple{typeof(MacroTools.isslurp), Symbol})
precompile(Tuple{typeof(MacroTools.slurprange), Array{Any, 1}})
precompile(Tuple{typeof(Base.:(!=)), Symbol, Symbol})
precompile(Tuple{typeof(MacroTools.bname), Symbol})
precompile(Tuple{typeof(MacroTools.store!), Base.Dict{Any, Any}, Symbol, Array{Any, 1}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Array{Any, 1}, Symbol})
precompile(Tuple{typeof(Base.get), Base.Dict{Any, Any}, Symbol, Nothing})
precompile(Tuple{typeof(Base.reverse), Array{Any, 1}})
precompile(Tuple{typeof(Rematch.handle_match_case), Symbol, Expr, Expr, Array{Expr, 1}})
precompile(Tuple{typeof(MacroTools.blockunify), Expr, Expr})
precompile(Tuple{typeof(MacroTools.match), Symbol, Expr, Base.Dict{Any, Any}})
precompile(Tuple{typeof(MacroTools.store!), Base.Dict{Any, Any}, Symbol, Expr})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Expr, Symbol})
precompile(Tuple{typeof(Base.isequal), Symbol, Symbol})
precompile(Tuple{typeof(Rematch.handle_destruct), Symbol, Expr, Base.Set{Symbol}, Array{Expr, 1}})
precompile(Tuple{typeof(MacroTools.blockunify), MacroTools.TypeBind, Expr})
precompile(Tuple{typeof(MacroTools.match_inner), MacroTools.TypeBind, Expr, Base.Dict{Any, Any}})
precompile(Tuple{typeof(Base.iterate), Base.Set{Any}})
precompile(Tuple{typeof(Base.iterate), Base.Set{Any}, Int64})
precompile(Tuple{typeof(MacroTools.isexpr), Expr, Symbol, Vararg{Symbol, N} where N})
precompile(Tuple{typeof(Base.push!), Base.Set{Any}, Type})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Nothing}, Nothing, Type{Symbol}})
precompile(Tuple{Rematch.var"#handle_destruct_fields##kw", NamedTuple{(:allow_splat,), Tuple{Bool}}, typeof(Rematch.handle_destruct_fields), Symbol, Expr, Array{Any, 1}, Expr, Symbol, Base.Set{Symbol}, Array{Expr, 1}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.Iterators.Enumerate{Array{Any, 1}}, Rematch.var"#3#4"{Symbol, Symbol, Base.Set{Symbol}, Array{Expr, 1}}}})
precompile(Tuple{Rematch.var"#3#4"{Symbol, Symbol, Base.Set{Symbol}, Array{Expr, 1}}, Tuple{Int64, Tuple{Int64, Symbol}}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.Iterators.Enumerate{Array{Any, 1}}, Rematch.var"#3#4"{Symbol, Symbol, Base.Set{Symbol}, Array{Expr, 1}}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.iterate), Base.Set{Symbol}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.Set{Symbol}, Rematch.var"#13#14"}})
precompile(Tuple{Rematch.var"#3#4"{Symbol, Symbol, Base.Set{Symbol}, Array{Expr, 1}}, Tuple{Int64, Tuple{Int64, Char}}})
precompile(Tuple{Base.var"#@async", LineNumberNode, Module, Any})
precompile(Tuple{typeof(Rematch.handle_match_cases), Symbol, Expr})
precompile(Tuple{typeof(MacroTools.store!), Base.Dict{Any, Any}, Symbol, Symbol})
precompile(Tuple{typeof(MacroTools.match), Symbol, Char, Base.Dict{Any, Any}})
precompile(Tuple{typeof(PanGraph.Graphs.Utility.include), String})
precompile(Tuple{typeof(Base.getindex), Type{UInt8}, Int64, Int64, Int64, Int64, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.setindex!), Array{UInt8, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{UInt8, 1}, Char, Int64})
precompile(Tuple{Type{NamedTuple{(:lower, :upper), T} where T<:Tuple}, Tuple{Float64, Float64}})
precompile(Tuple{Type{NamedTuple{(:open, :extend, :band, :gap, :match), T} where T<:Tuple}, Tuple{Float64, Float64, NamedTuple{(:lower, :upper), Tuple{Float64, Float64}}, PanGraph.Graphs.Utility.var"#16#18", PanGraph.Graphs.Utility.var"#17#19"}})
precompile(Tuple{Base.var"#@assert", LineNumberNode, Module, Any, Vararg{Any, N} where N})
precompile(Tuple{typeof(MacroTools.match), Symbol, QuoteNode, Base.Dict{Any, Any}})
precompile(Tuple{typeof(Rematch.handle_destruct), Symbol, QuoteNode, Base.Set{Symbol}, Array{Expr, 1}})
precompile(Tuple{typeof(MacroTools.isexpr), Symbol, Symbol, Vararg{Symbol, N} where N})
precompile(Tuple{typeof(MacroTools.blockunify), Expr, Symbol})
precompile(Tuple{typeof(MacroTools.match_inner), Expr, Symbol, Base.Dict{Any, Any}})
precompile(Tuple{typeof(MacroTools.isexpr), Symbol, Type})
precompile(Tuple{typeof(Base.iterate), Base.Set{Symbol}, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.Set{Symbol}, Rematch.var"#13#14"}, Int64})
precompile(Tuple{typeof(Base.Libc.Libdl.dlopen), String, UInt32})
precompile(Tuple{typeof(Base.invokelatest), Any})
precompile(Tuple{typeof(Base.rand)})
precompile(Tuple{typeof(Base.randn)})
precompile(Tuple{typeof(Random.randexp)})
precompile(Tuple{typeof(Rmath.__init__)})
precompile(Tuple{typeof(Base.require), Module, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.IdDict{Base.Dict{String, Any}, Nothing}, Any, Any})
precompile(Tuple{typeof(Base.setindex!), Base.IdDict{Any, Nothing}, Any, Any})
precompile(Tuple{typeof(PanGraph.Graphs.Align.include), String})
precompile(Tuple{typeof(PanGraph.Graphs.Align.Pool.pool), Int64})
precompile(Tuple{Base.var"##sprint#385", Nothing, Int64, typeof(Base.sprint), Function, Array{Char, 1}})
precompile(Tuple{typeof(Base.join), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{Char, 1}})
precompile(Tuple{typeof(Base.atexit), Function})
precompile(Tuple{Core.var"#@cmd", LineNumberNode, Module, Any})
precompile(Tuple{Base.Threads.var"#@spawn", LineNumberNode, Module, Any})
precompile(Tuple{Type{NamedTuple{(:short, :long), T} where T<:Tuple}, Tuple{String, String}})
precompile(Tuple{Type{PanGraph.Commands.Arg}, Type, String, NamedTuple{(:short, :long), Tuple{String, String}}, String, Int64})
precompile(Tuple{Type{PanGraph.Commands.Arg}, Type, String, NamedTuple{(:short, :long), Tuple{String, String}}, String, Bool})
precompile(Tuple{typeof(Base.vect), PanGraph.Commands.Arg, Vararg{PanGraph.Commands.Arg, N} where N})
precompile(Tuple{Type{PanGraph.Commands.Command}, String, String, String, String, Array{PanGraph.Commands.Arg, 1}, Function})
precompile(Tuple{Type{PanGraph.Commands.Arg}, Type, String, NamedTuple{(:short, :long), Tuple{String, String}}, String, Float64})
precompile(Tuple{Type{PanGraph.Commands.Command}, String, String, String, String, Array{PanGraph.Commands.Arg, 1}})
precompile(Tuple{typeof(Base.vect), PanGraph.Commands.Command, Vararg{PanGraph.Commands.Command, N} where N})
precompile(Tuple{Type{PanGraph.Commands.Command}, String, String, String, String, Array{PanGraph.Commands.Command, 1}})
precompile(Tuple{typeof(PanGraph.Graphs.Align.finalize)})
precompile(Tuple{typeof(Base.getproperty), Base.Channel{PanGraph.Graphs.Align.Pool.Fifo}, Symbol})
precompile(Tuple{typeof(Base.Filesystem.abspath), String})
precompile(Tuple{Base.Sort.var"##sortperm#12", Base.Sort.QuickSortAlg, Function, Function, Bool, Base.Order.ForwardOrdering, typeof(Base.sortperm), Array{Float64, 1}})
precompile(Tuple{Type{Base.Order.Perm{O, V} where V<:(AbstractArray{T, 1} where T) where O<:Base.Order.Ordering}, Base.Order.ReverseOrdering{Base.Order.ForwardOrdering}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Base.Sort.QuickSortAlg, Base.Order.Perm{Base.Order.ReverseOrdering{Base.Order.ForwardOrdering}, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, UInt16})
precompile(Tuple{typeof(MacroTools.__init__)})
precompile(Tuple{typeof(Random.shuffle!), Random.MersenneTwister, Array{Symbol, 1}})
precompile(Tuple{typeof(PanGraph.include), String})
precompile(Tuple{Base.var"#@label", LineNumberNode, Module, Symbol})
precompile(Tuple{Base.var"#@goto", LineNumberNode, Module, Symbol})
precompile(Tuple{typeof(Parsers.__init__)})
precompile(Tuple{typeof(Base.Threads.resize_nthreads!), Array{Base.MPFR.BigFloat, 1}, Base.MPFR.BigFloat})
precompile(Tuple{typeof(Base.Threads.resize_nthreads!), Array{Base.GMP.BigInt, 1}, Base.GMP.BigInt})
precompile(Tuple{typeof(PanGraph.Graphs.include), String})
precompile(Tuple{Base.var"#@show", LineNumberNode, Module, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.sprint), Function, Symbol})
precompile(Tuple{typeof(Base.show_unquoted), Base.GenericIOBuffer{Array{UInt8, 1}}, Symbol})
precompile(Tuple{Base.var"#@inline", LineNumberNode, Module, Any})
precompile(Tuple{Base.Multimedia.var"#@MIME_str", LineNumberNode, Module, Any})
precompile(Tuple{Rematch.var"#@match", LineNumberNode, Module, Any, Any})
precompile(Tuple{typeof(Rematch.handle_match_cases), Expr, Expr})
precompile(Tuple{typeof(MacroTools.match), Expr, Expr, Base.Dict{Any, Any}})
precompile(Tuple{typeof(MacroTools.normalise), Expr})
precompile(Tuple{typeof(MacroTools.unblock), Expr})
precompile(Tuple{typeof(MacroTools.rmlines), Expr})
precompile(Tuple{typeof(MacroTools.unblock), Symbol})
precompile(Tuple{typeof(MacroTools.isbinding), Symbol})
precompile(Tuple{MacroTools.var"#16#18", Expr})
precompile(Tuple{typeof(MacroTools.blockunify), Symbol, Expr})
precompile(Tuple{typeof(MacroTools.match_inner), Expr, Expr, Base.Dict{Any, Any}})
precompile(Tuple{typeof(MacroTools.match), Symbol, Symbol, Base.Dict{Any, Any}})
precompile(Tuple{typeof(MacroTools.isslurp), Symbol})
precompile(Tuple{typeof(MacroTools.slurprange), Array{Any, 1}})
precompile(Tuple{typeof(Base.:(!=)), Symbol, Symbol})
precompile(Tuple{typeof(MacroTools.bname), Symbol})
precompile(Tuple{typeof(MacroTools.store!), Base.Dict{Any, Any}, Symbol, Array{Any, 1}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Array{Any, 1}, Symbol})
precompile(Tuple{typeof(Base.get), Base.Dict{Any, Any}, Symbol, Nothing})
precompile(Tuple{typeof(Base.reverse), Array{Any, 1}})
precompile(Tuple{typeof(Rematch.handle_match_case), Symbol, Expr, Expr, Array{Expr, 1}})
precompile(Tuple{typeof(MacroTools.blockunify), Expr, Expr})
precompile(Tuple{typeof(MacroTools.match), Symbol, Expr, Base.Dict{Any, Any}})
precompile(Tuple{typeof(MacroTools.store!), Base.Dict{Any, Any}, Symbol, Expr})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Expr, Symbol})
precompile(Tuple{typeof(Base.isequal), Symbol, Symbol})
precompile(Tuple{typeof(Rematch.handle_destruct), Symbol, Expr, Base.Set{Symbol}, Array{Expr, 1}})
precompile(Tuple{typeof(MacroTools.blockunify), MacroTools.TypeBind, Expr})
precompile(Tuple{typeof(MacroTools.match_inner), MacroTools.TypeBind, Expr, Base.Dict{Any, Any}})
precompile(Tuple{typeof(Base.iterate), Base.Set{Any}})
precompile(Tuple{typeof(Base.iterate), Base.Set{Any}, Int64})
precompile(Tuple{typeof(MacroTools.isexpr), Expr, Symbol, Vararg{Symbol, N} where N})
precompile(Tuple{typeof(Base.push!), Base.Set{Any}, Type})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Nothing}, Nothing, Type{Symbol}})
precompile(Tuple{Rematch.var"#handle_destruct_fields##kw", NamedTuple{(:allow_splat,), Tuple{Bool}}, typeof(Rematch.handle_destruct_fields), Symbol, Expr, Array{Any, 1}, Expr, Symbol, Base.Set{Symbol}, Array{Expr, 1}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.Iterators.Enumerate{Array{Any, 1}}, Rematch.var"#3#4"{Symbol, Symbol, Base.Set{Symbol}, Array{Expr, 1}}}})
precompile(Tuple{Rematch.var"#3#4"{Symbol, Symbol, Base.Set{Symbol}, Array{Expr, 1}}, Tuple{Int64, Tuple{Int64, Symbol}}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.Iterators.Enumerate{Array{Any, 1}}, Rematch.var"#3#4"{Symbol, Symbol, Base.Set{Symbol}, Array{Expr, 1}}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.iterate), Base.Set{Symbol}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.Set{Symbol}, Rematch.var"#13#14"}})
precompile(Tuple{Rematch.var"#3#4"{Symbol, Symbol, Base.Set{Symbol}, Array{Expr, 1}}, Tuple{Int64, Tuple{Int64, Char}}})
precompile(Tuple{Base.var"#@async", LineNumberNode, Module, Any})
precompile(Tuple{typeof(Rematch.handle_match_cases), Symbol, Expr})
precompile(Tuple{typeof(MacroTools.store!), Base.Dict{Any, Any}, Symbol, Symbol})
precompile(Tuple{typeof(MacroTools.match), Symbol, Char, Base.Dict{Any, Any}})
precompile(Tuple{typeof(PanGraph.Graphs.Utility.include), String})
precompile(Tuple{typeof(Base.getindex), Type{UInt8}, Int64, Int64, Int64, Int64, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.setindex!), Array{UInt8, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{UInt8, 1}, Char, Int64})
precompile(Tuple{Type{NamedTuple{(:lower, :upper), T} where T<:Tuple}, Tuple{Float64, Float64}})
precompile(Tuple{Type{NamedTuple{(:open, :extend, :band, :gap, :match), T} where T<:Tuple}, Tuple{Float64, Float64, NamedTuple{(:lower, :upper), Tuple{Float64, Float64}}, PanGraph.Graphs.Utility.var"#16#18", PanGraph.Graphs.Utility.var"#17#19"}})
precompile(Tuple{Base.var"#@assert", LineNumberNode, Module, Any, Vararg{Any, N} where N})
precompile(Tuple{typeof(MacroTools.match), Symbol, QuoteNode, Base.Dict{Any, Any}})
precompile(Tuple{typeof(Rematch.handle_destruct), Symbol, QuoteNode, Base.Set{Symbol}, Array{Expr, 1}})
precompile(Tuple{typeof(MacroTools.isexpr), Symbol, Symbol, Vararg{Symbol, N} where N})
precompile(Tuple{typeof(MacroTools.blockunify), Expr, Symbol})
precompile(Tuple{typeof(MacroTools.match_inner), Expr, Symbol, Base.Dict{Any, Any}})
precompile(Tuple{typeof(MacroTools.isexpr), Symbol, Type})
precompile(Tuple{typeof(Base.iterate), Base.Set{Symbol}, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.Set{Symbol}, Rematch.var"#13#14"}, Int64})
precompile(Tuple{typeof(Base.Libc.Libdl.dlopen), String, UInt32})
precompile(Tuple{typeof(Base.invokelatest), Any})
precompile(Tuple{typeof(Base.rand)})
precompile(Tuple{typeof(Base.randn)})
precompile(Tuple{typeof(Random.randexp)})
precompile(Tuple{typeof(Rmath.__init__)})
precompile(Tuple{typeof(Base.require), Module, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.IdDict{Base.Dict{String, Any}, Nothing}, Any, Any})
precompile(Tuple{typeof(Base.setindex!), Base.IdDict{Any, Nothing}, Any, Any})
precompile(Tuple{typeof(PanGraph.Graphs.Align.include), String})
precompile(Tuple{typeof(PanGraph.Graphs.Align.Pool.pool), Int64})
precompile(Tuple{Base.var"##sprint#385", Nothing, Int64, typeof(Base.sprint), Function, Array{Char, 1}})
precompile(Tuple{typeof(Base.join), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{Char, 1}})
precompile(Tuple{typeof(Base.atexit), Function})
precompile(Tuple{Core.var"#@cmd", LineNumberNode, Module, Any})
precompile(Tuple{Base.Threads.var"#@spawn", LineNumberNode, Module, Any})
precompile(Tuple{Type{NamedTuple{(:short, :long), T} where T<:Tuple}, Tuple{String, String}})
precompile(Tuple{Type{PanGraph.Commands.Arg}, Type, String, NamedTuple{(:short, :long), Tuple{String, String}}, String, Int64})
precompile(Tuple{Type{PanGraph.Commands.Arg}, Type, String, NamedTuple{(:short, :long), Tuple{String, String}}, String, Bool})
precompile(Tuple{typeof(Base.vect), PanGraph.Commands.Arg, Vararg{PanGraph.Commands.Arg, N} where N})
precompile(Tuple{Type{PanGraph.Commands.Command}, String, String, String, String, Array{PanGraph.Commands.Arg, 1}, Function})
precompile(Tuple{Type{PanGraph.Commands.Arg}, Type, String, NamedTuple{(:short, :long), Tuple{String, String}}, String, Float64})
precompile(Tuple{Type{PanGraph.Commands.Command}, String, String, String, String, Array{PanGraph.Commands.Arg, 1}})
precompile(Tuple{typeof(Base.vect), PanGraph.Commands.Command, Vararg{PanGraph.Commands.Command, N} where N})
precompile(Tuple{Type{PanGraph.Commands.Command}, String, String, String, String, Array{PanGraph.Commands.Command, 1}})
precompile(Tuple{typeof(PanGraph.Graphs.Align.finalize)})
precompile(Tuple{typeof(Base.getproperty), Base.Channel{PanGraph.Graphs.Align.Pool.Fifo}, Symbol})
precompile(Tuple{typeof(Base.Filesystem.abspath), String})
precompile(Tuple{Base.Sort.var"##sortperm#12", Base.Sort.QuickSortAlg, Function, Function, Bool, Base.Order.ForwardOrdering, typeof(Base.sortperm), Array{Float64, 1}})
precompile(Tuple{Type{Base.Order.Perm{O, V} where V<:(AbstractArray{T, 1} where T) where O<:Base.Order.Ordering}, Base.Order.ReverseOrdering{Base.Order.ForwardOrdering}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Base.Sort.QuickSortAlg, Base.Order.Perm{Base.Order.ReverseOrdering{Base.Order.ForwardOrdering}, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, UInt16})
precompile(Tuple{typeof(MacroTools.__init__)})
precompile(Tuple{typeof(Random.shuffle!), Random.MersenneTwister, Array{Symbol, 1}})
precompile(Tuple{typeof(PanGraph.include), String})
precompile(Tuple{Base.var"#@label", LineNumberNode, Module, Symbol})
precompile(Tuple{Base.var"#@goto", LineNumberNode, Module, Symbol})
precompile(Tuple{typeof(Parsers.__init__)})
precompile(Tuple{typeof(Base.Threads.resize_nthreads!), Array{Base.MPFR.BigFloat, 1}, Base.MPFR.BigFloat})
precompile(Tuple{typeof(Base.Threads.resize_nthreads!), Array{Base.GMP.BigInt, 1}, Base.GMP.BigInt})
precompile(Tuple{typeof(PanGraph.Graphs.include), String})
precompile(Tuple{Base.var"#@show", LineNumberNode, Module, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.sprint), Function, Symbol})
precompile(Tuple{typeof(Base.show_unquoted), Base.GenericIOBuffer{Array{UInt8, 1}}, Symbol})
precompile(Tuple{Base.var"#@inline", LineNumberNode, Module, Any})
precompile(Tuple{Base.Multimedia.var"#@MIME_str", LineNumberNode, Module, Any})
precompile(Tuple{Rematch.var"#@match", LineNumberNode, Module, Any, Any})
precompile(Tuple{typeof(Rematch.handle_match_cases), Expr, Expr})
precompile(Tuple{typeof(MacroTools.match), Expr, Expr, Base.Dict{Any, Any}})
precompile(Tuple{typeof(MacroTools.normalise), Expr})
precompile(Tuple{typeof(MacroTools.unblock), Expr})
precompile(Tuple{typeof(MacroTools.rmlines), Expr})
precompile(Tuple{typeof(MacroTools.unblock), Symbol})
precompile(Tuple{typeof(MacroTools.isbinding), Symbol})
precompile(Tuple{MacroTools.var"#16#18", Expr})
precompile(Tuple{typeof(MacroTools.blockunify), Symbol, Expr})
precompile(Tuple{typeof(MacroTools.match_inner), Expr, Expr, Base.Dict{Any, Any}})
precompile(Tuple{typeof(MacroTools.match), Symbol, Symbol, Base.Dict{Any, Any}})
precompile(Tuple{typeof(MacroTools.isslurp), Symbol})
precompile(Tuple{typeof(MacroTools.slurprange), Array{Any, 1}})
precompile(Tuple{typeof(Base.:(!=)), Symbol, Symbol})
precompile(Tuple{typeof(MacroTools.bname), Symbol})
precompile(Tuple{typeof(MacroTools.store!), Base.Dict{Any, Any}, Symbol, Array{Any, 1}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Array{Any, 1}, Symbol})
precompile(Tuple{typeof(Base.get), Base.Dict{Any, Any}, Symbol, Nothing})
precompile(Tuple{typeof(Base.reverse), Array{Any, 1}})
precompile(Tuple{typeof(Rematch.handle_match_case), Symbol, Expr, Expr, Array{Expr, 1}})
precompile(Tuple{typeof(MacroTools.blockunify), Expr, Expr})
precompile(Tuple{typeof(MacroTools.match), Symbol, Expr, Base.Dict{Any, Any}})
precompile(Tuple{typeof(MacroTools.store!), Base.Dict{Any, Any}, Symbol, Expr})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Expr, Symbol})
precompile(Tuple{typeof(Base.isequal), Symbol, Symbol})
precompile(Tuple{typeof(Rematch.handle_destruct), Symbol, Expr, Base.Set{Symbol}, Array{Expr, 1}})
precompile(Tuple{typeof(MacroTools.blockunify), MacroTools.TypeBind, Expr})
precompile(Tuple{typeof(MacroTools.match_inner), MacroTools.TypeBind, Expr, Base.Dict{Any, Any}})
precompile(Tuple{typeof(Base.iterate), Base.Set{Any}})
precompile(Tuple{typeof(Base.iterate), Base.Set{Any}, Int64})
precompile(Tuple{typeof(MacroTools.isexpr), Expr, Symbol, Vararg{Symbol, N} where N})
precompile(Tuple{typeof(Base.push!), Base.Set{Any}, Type})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Nothing}, Nothing, Type{Symbol}})
precompile(Tuple{Rematch.var"#handle_destruct_fields##kw", NamedTuple{(:allow_splat,), Tuple{Bool}}, typeof(Rematch.handle_destruct_fields), Symbol, Expr, Array{Any, 1}, Expr, Symbol, Base.Set{Symbol}, Array{Expr, 1}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.Iterators.Enumerate{Array{Any, 1}}, Rematch.var"#3#4"{Symbol, Symbol, Base.Set{Symbol}, Array{Expr, 1}}}})
precompile(Tuple{Rematch.var"#3#4"{Symbol, Symbol, Base.Set{Symbol}, Array{Expr, 1}}, Tuple{Int64, Tuple{Int64, Symbol}}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.Iterators.Enumerate{Array{Any, 1}}, Rematch.var"#3#4"{Symbol, Symbol, Base.Set{Symbol}, Array{Expr, 1}}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.iterate), Base.Set{Symbol}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.Set{Symbol}, Rematch.var"#13#14"}})
precompile(Tuple{Rematch.var"#3#4"{Symbol, Symbol, Base.Set{Symbol}, Array{Expr, 1}}, Tuple{Int64, Tuple{Int64, Char}}})
precompile(Tuple{Base.var"#@async", LineNumberNode, Module, Any})
precompile(Tuple{typeof(Rematch.handle_match_cases), Symbol, Expr})
precompile(Tuple{typeof(MacroTools.store!), Base.Dict{Any, Any}, Symbol, Symbol})
precompile(Tuple{typeof(MacroTools.match), Symbol, Char, Base.Dict{Any, Any}})
precompile(Tuple{typeof(PanGraph.Graphs.Utility.include), String})
precompile(Tuple{typeof(Base.getindex), Type{UInt8}, Int64, Int64, Int64, Int64, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.setindex!), Array{UInt8, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{UInt8, 1}, Char, Int64})
precompile(Tuple{Type{NamedTuple{(:lower, :upper), T} where T<:Tuple}, Tuple{Float64, Float64}})
precompile(Tuple{Type{NamedTuple{(:open, :extend, :band, :gap, :match), T} where T<:Tuple}, Tuple{Float64, Float64, NamedTuple{(:lower, :upper), Tuple{Float64, Float64}}, PanGraph.Graphs.Utility.var"#16#18", PanGraph.Graphs.Utility.var"#17#19"}})
precompile(Tuple{Base.var"#@assert", LineNumberNode, Module, Any, Vararg{Any, N} where N})
precompile(Tuple{typeof(MacroTools.match), Symbol, QuoteNode, Base.Dict{Any, Any}})
precompile(Tuple{typeof(Rematch.handle_destruct), Symbol, QuoteNode, Base.Set{Symbol}, Array{Expr, 1}})
precompile(Tuple{typeof(MacroTools.isexpr), Symbol, Symbol, Vararg{Symbol, N} where N})
precompile(Tuple{typeof(MacroTools.blockunify), Expr, Symbol})
precompile(Tuple{typeof(MacroTools.match_inner), Expr, Symbol, Base.Dict{Any, Any}})
precompile(Tuple{typeof(MacroTools.isexpr), Symbol, Type})
precompile(Tuple{typeof(Base.iterate), Base.Set{Symbol}, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.Set{Symbol}, Rematch.var"#13#14"}, Int64})
precompile(Tuple{typeof(Base.Libc.Libdl.dlopen), String, UInt32})
precompile(Tuple{typeof(Base.invokelatest), Any})
precompile(Tuple{typeof(Base.rand)})
precompile(Tuple{typeof(Base.randn)})
precompile(Tuple{typeof(Random.randexp)})
precompile(Tuple{typeof(Rmath.__init__)})
precompile(Tuple{typeof(Base.require), Module, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.IdDict{Base.Dict{String, Any}, Nothing}, Any, Any})
precompile(Tuple{typeof(Base.setindex!), Base.IdDict{Any, Nothing}, Any, Any})
precompile(Tuple{typeof(PanGraph.Graphs.Align.include), String})
precompile(Tuple{typeof(PanGraph.Graphs.Align.Pool.pool), Int64})
precompile(Tuple{Base.var"##sprint#385", Nothing, Int64, typeof(Base.sprint), Function, Array{Char, 1}})
precompile(Tuple{typeof(Base.join), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{Char, 1}})
precompile(Tuple{typeof(Base.atexit), Function})
precompile(Tuple{Core.var"#@cmd", LineNumberNode, Module, Any})
precompile(Tuple{Base.Threads.var"#@spawn", LineNumberNode, Module, Any})
precompile(Tuple{Type{NamedTuple{(:short, :long), T} where T<:Tuple}, Tuple{String, String}})
precompile(Tuple{Type{PanGraph.Commands.Arg}, Type, String, NamedTuple{(:short, :long), Tuple{String, String}}, String, Int64})
precompile(Tuple{Type{PanGraph.Commands.Arg}, Type, String, NamedTuple{(:short, :long), Tuple{String, String}}, String, Bool})
precompile(Tuple{typeof(Base.vect), PanGraph.Commands.Arg, Vararg{PanGraph.Commands.Arg, N} where N})
precompile(Tuple{Type{PanGraph.Commands.Command}, String, String, String, String, Array{PanGraph.Commands.Arg, 1}, Function})
precompile(Tuple{Type{PanGraph.Commands.Arg}, Type, String, NamedTuple{(:short, :long), Tuple{String, String}}, String, Float64})
precompile(Tuple{Type{PanGraph.Commands.Command}, String, String, String, String, Array{PanGraph.Commands.Arg, 1}})
precompile(Tuple{typeof(Base.vect), PanGraph.Commands.Command, Vararg{PanGraph.Commands.Command, N} where N})
precompile(Tuple{Type{PanGraph.Commands.Command}, String, String, String, String, Array{PanGraph.Commands.Command, 1}})
precompile(Tuple{typeof(PanGraph.Graphs.Align.finalize)})
precompile(Tuple{typeof(Base.getproperty), Base.Channel{PanGraph.Graphs.Align.Pool.Fifo}, Symbol})
