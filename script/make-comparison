#!/bin/bash -e

if [[ $# -lt 3 ]]; then
    echo 'please provide a path to the script and a path store the resulting JLD2 file'
    exit 1
fi

seq="$1"
cmd="$2"
out="$3"
data="data/synthetic"
pipe="$data/pipe"

trap 'cleanup' ERR

initpipe()
{
    if [[ -e $pipe ]]; then
        closepipe
    fi
    mkfifo "$pipe"
}

closepipe()
{
    exec 3>&-
    rm -f "$pipe"
}

cleanup()
{
    closepipe
    rm -f "$out"
}

blockif()
{
    while [[ $(jobs -pr | wc -l) -gt "$1" ]]
    do
        sleep 5
    done
}

# simulation parameters
 # N=100; T=50; L=100000
N=50; T=25; L=50000

hgts="1e-2 5e-2 1e-1 5e-1"
snps="1e-4 2.5e-4 5e-4 7.5e-4 1e-3 2.5e-3 5e-3 7.5e-3 1e-2"

# open up the consumer process
initpipe
{ julia --project=. "$cmd" "$pipe" "$out"; }&
pid=$!
exec 3>"$pipe"

# main simulation loop
for hgt in $hgts
do
    for snp in $snps
    do
        for nit in {1..20}
        do
            blockif 10 # ensure we don't throttle the system
            (
                known=$(mktemp /tmp/known.json.XXXXXX)
                guess=$(mktemp /tmp/guess.json.XXXXXX)

                julia --project=. "$seq" -N "$N" -L "$L" \
              | pangraph generate -m "$snp" -r "$hgt" -t "$T" -i "1e-2" -o "$known" \
              | pangraph build --circular -m 0 -b 0 1>"$guess" 2>/dev/null

                # NOTE: concurrent writes to a pipe are guaranteed to be atomic,
                # provided they are smaller than the buffer. This, in turn, is
                # at minimum 512 bytes. We are fine without explicit locking...
                printf "%.1e;%.1e;%02d;%s;%s\n" "$hgt" "$snp" "$nit" "$known" "$guess" 1>&3

                # NOTE: dont remove here for data race reason.
                # instead, do so in the write kernel
                # rm $known $guess
            )&
        done
    done
done

# find extant pids (that are not consumer), wait for them
children=($(jobs -p | grep -v "$pid"))
for child in "${children[@]}"
do
    wait "$child"
done
# done, now close our pipe
closepipe
# wait for our consumer to cleanup
wait "$pid"
# verify cleanup
rm -f /tmp/{guess,known}.json.??????
